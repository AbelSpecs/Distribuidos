/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package pantalla;

import static cliente.ClienteC.path;
import static cliente.ClienteC.pathZ39;
import static cliente.ClienteC.port;
import static cliente.ClienteC.portZ39;
import common.IMiddlewareZ39;
import common.IServidorC;
import common.Libro;
import java.io.IOException;
import java.net.MalformedURLException;
import java.rmi.Naming;
import java.rmi.NotBoundException;
import java.rmi.RemoteException;
import java.util.List;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

/**
 *
 * @author Omar David
 */
public class BibliotecaC extends javax.swing.JFrame {

    /**
     * Creates new form BibliotecaC
     */
    
    private static IServidorC servidor;
    private static IMiddlewareZ39 middleware;    
    private static List<Libro> catalogo;
    
    public static String ip = "127.0.0.1";
    
    public static int port = 8000;
    public static String path = "Encontrar";
    
    public static int portZ39 = 8001;
    public static String pathZ39 = "Get";
    
    public BibliotecaC() {
        initComponents();
        this.setLocationRelativeTo(null);
        this.setTitle("Biblioteca C");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    
    
    /**
    * Metodo que se comunica con la biblioteca local del cliente
    */
    public static List<Libro> biblioLocal(int opcion,String cadena) throws RemoteException, IOException{
        String in = cadena;
        int option = opcion;

            switch(option){
                case 1:
                    catalogo = servidor.encontrarAutor(in);
                    break;
                case 2:
                    catalogo = servidor.encontrarLibro(in);                  
                    break;      
                case 3:   
                    catalogo = servidor.getLibros();  
                    break;     
            }
        return catalogo;
        }        
    
    /**
    * Metodo que se comunica con las bibliotecas remotas usando middleware
    */
    public static List<Libro> biblioRemota(int opcion,String cadena) throws RemoteException{
        String in = cadena;
        int option = opcion;

            switch(option){
                case 1:
                    catalogo = middleware.getAuthor(in);                 
                    break;
                case 2:
                    catalogo = middleware.getTitle(in);                  
                    break;      
                case 3:   
                    catalogo = middleware.getLibros();                    
                    break;     
            }
        return catalogo;
        }        
      
     /**
    * Metodo para la validacion de la dirección IP
    */
    public static void ipServer(){
        Scanner scanner = new Scanner(System.in);
        System.out.println("Ingrese la ip de la biblioteca");
        ip = scanner.next();      
        while(!ipValida(ip)){
            System.out.println("Ingrese una ip valida");
            ip = scanner.next();            
        }
  
    }
    /**
    * Metodo que se encarga de comprobar que la direccion ip es correcta
    */
    public static boolean ipValida(String ip) 
    { 
        String zeroTo255 
            = "(\\d{1,2}|(0|1)\\"
              + "d{2}|2[0-4]\\d|25[0-5])"; 
        String regex 
            = zeroTo255 + "\\."
              + zeroTo255 + "\\."
              + zeroTo255 + "\\."
              + zeroTo255; 
        Pattern p = Pattern.compile(regex); 
        if (ip == null) { 
            return false; 
        } 
        Matcher m = p.matcher(ip); 
        return m.matches(); 
    } 
    
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        lblLogo = new javax.swing.JLabel();
        txtBuscador = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        listLibros = new javax.swing.JList<>();
        btnBuscar = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox<>();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jLabel3 = new javax.swing.JLabel();
        lblLibro = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        lblAutor = new javax.swing.JLabel();
        txtBuscador1 = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jComboBox2 = new javax.swing.JComboBox<>();
        jLabel7 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lblLogo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/logoC.png"))); // NOI18N
        lblLogo.setText("Biblioteca C");
        jPanel1.add(lblLogo, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 10, 160, 70));
        jPanel1.add(txtBuscador, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 90, 210, 30));

        jScrollPane1.setViewportView(listLibros);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 110, 180, 250));

        btnBuscar.setText("Buscar");
        btnBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarActionPerformed(evt);
            }
        });
        jPanel1.add(btnBuscar, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 40, 110, -1));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/search.png"))); // NOI18N
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 40, 40, 40));

        jLabel2.setText("IP");
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 46, 20, 20));

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "- -", "BibliotecaC", "BibliotecaA", "BibliotecaB" }));
        jPanel1.add(jComboBox1, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 90, 110, 30));

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane3.setViewportView(jTextArea1);

        jPanel1.add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 130, 460, 220));

        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/book.png"))); // NOI18N
        jPanel1.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 90, 50, 30));
        jPanel1.add(lblLibro, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 100, 160, 20));

        jLabel5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/autor.png"))); // NOI18N
        jPanel1.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 90, 50, 30));
        jPanel1.add(lblAutor, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 100, 150, 20));
        jPanel1.add(txtBuscador1, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 40, 210, 30));

        jLabel4.setText("En");
        jPanel1.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 70, 80, 20));

        jLabel6.setText("Buscar");
        jPanel1.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 100, 80, -1));

        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "- -", "Titulo", "Autor", "Libros" }));
        jPanel1.add(jComboBox2, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 40, 110, 30));

        jLabel7.setText("buscar por: ");
        jPanel1.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 20, 80, -1));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 735, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 378, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarActionPerformed
        /**
         * En el siguiente codigo se encuentra la variable ip la cual almacena
         * la direccion escrita en el campo jtextfield de la interfaz
         * la cual ayudara a entablar la conexión
         * La variable cadena almacena el valor con el cual se solicitara 
         * la información, esta puede ser un autor, el titulo de un libro o
         * puede llegar vacia lo que indicará que se desean todos los libros
         * la variable libro almacena los libros provenientes de la consulta
         * para luego imprimirlo en el campo de texto correspondiente
         */
        
        ip = txtBuscador1.getText();
        String cadena = txtBuscador.getText();
        List<Libro> libro;  
        
        if(jComboBox1.getSelectedItem()  == "BibliotecaC"){
            try {
                /** Abriendo Conexión hacia la biblioteca local */
                servidor = (IServidorC) Naming.lookup("rmi://" + ip + ":" + port + "/" + path);
                if (jComboBox2.getSelectedItem() == "Autor"){
                    jTextArea1.setText(null);
                    libro =  biblioLocal(1,cadena);
                     for(int i = 0; i < libro.size(); i++){
                           jTextArea1.append(libro.get(i).getTitle() + '\n'); 
                       }
                }
                else if(jComboBox2.getSelectedItem() == "Titulo"){
                    jTextArea1.setText(null);
                    libro =  biblioLocal(2,cadena);
                       jTextArea1.append(libro.get(0).getAuthor()+ '\n'); 
                }
                else if(jComboBox2.getSelectedItem() == "Libros"){
                    jTextArea1.setText(null);
                    System.out.println(cadena);
                    libro =  biblioLocal(3,cadena);
                       for(int i = 0; i < libro.size(); i++){
                           jTextArea1.append(libro.get(i).getTitle() + '\n'); 
                       }
                }
                
                
            } catch (NotBoundException ex) {
                Logger.getLogger(BibliotecaC.class.getName()).log(Level.SEVERE, null, ex);
            } catch (MalformedURLException ex) {
                Logger.getLogger(BibliotecaC.class.getName()).log(Level.SEVERE, null, ex);
            } catch (RemoteException ex) {
                Logger.getLogger(BibliotecaC.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(BibliotecaC.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        else{
            try {
                /** Abriendo Conexión hacia las demas bibliotecas usando middleware */
                middleware = (IMiddlewareZ39) Naming.lookup("rmi://" + ip + ":" + portZ39 + "/" + pathZ39);
                if(jComboBox2.getSelectedItem() == "Autor"){
                    jTextArea1.setText(null);
                    libro =  biblioRemota(1,cadena);
                    for(int i = 0; i < libro.size(); i++){
                           jTextArea1.append(libro.get(i).getTitle() + '\n'); 
                       }    
                }
                else if(jComboBox2.getSelectedItem() == "Titulo"){
                    jTextArea1.setText(null);
                    libro =  biblioRemota(2,cadena);
                    jTextArea1.append(libro.get(0).getAuthor() + '\n'); 
                       
                }
                else if(jComboBox2.getSelectedItem() == "Libros"){
                    jTextArea1.setText(null);
                    libro =  biblioRemota(3,cadena);
                       for(int i = 0; i < libro.size(); i++){
                           jTextArea1.append(libro.get(i).getTitle() + '\n'); 
                       }
                }
                
                
            } catch (NotBoundException ex) {
                Logger.getLogger(BibliotecaC.class.getName()).log(Level.SEVERE, null, ex);
            } catch (MalformedURLException ex) {
                Logger.getLogger(BibliotecaC.class.getName()).log(Level.SEVERE, null, ex);
            } catch (RemoteException ex) {
                Logger.getLogger(BibliotecaC.class.getName()).log(Level.SEVERE, null, ex);
            }
        
            
        }
        
    }//GEN-LAST:event_btnBuscarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(BibliotecaC.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(BibliotecaC.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(BibliotecaC.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BibliotecaC.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new BibliotecaC().setVisible(true);
            }
        });
    }
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBuscar;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JComboBox<String> jComboBox2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JLabel lblAutor;
    private javax.swing.JLabel lblLibro;
    private javax.swing.JLabel lblLogo;
    private javax.swing.JList<String> listLibros;
    private javax.swing.JTextField txtBuscador;
    private javax.swing.JTextField txtBuscador1;
    // End of variables declaration//GEN-END:variables
}
