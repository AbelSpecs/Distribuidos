/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package pantalla;

import static cliente.ClienteB.path;
import static cliente.ClienteB.pathZ39;
import static cliente.ClienteB.port;
import static cliente.ClienteB.portZ39;
import common.IMiddlewareZ39;
import common.IServidorB;
import common.Libro;
import java.io.IOException;
import java.net.MalformedURLException;
import java.rmi.Naming;
import java.rmi.NotBoundException;
import java.rmi.RemoteException;
import java.util.List;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

/**
 *
 * @author Omar David
 */
public class BibliotecaB extends javax.swing.JFrame {

    
    private static IServidorB servidor;
    private static IMiddlewareZ39 middleware;    
    private static List<Libro> catalogo;
    
    public static String ip = "127.0.0.1";
    
    public static int port = 8000;
    public static String path = "Buscar";
    
    public static int portZ39 = 8001;
    public static String pathZ39 = "Get";
    /**
     * 
     * Creates new form BibliotecaB
     */
    public BibliotecaB() {
        initComponents();
        this.setLocationRelativeTo(null);
        this.setTitle("Biblioteca B");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    
    /**
    * Metodo que se comunica con la biblioteca local del cliente
    */
    public static List<Libro> biblioLocal(int opcion, String cadena) throws RemoteException, IOException{
        String in = cadena;
        int option = opcion;
            switch(option){
                case 1:
                    catalogo = servidor.buscarAutor(in);
                    break;
                case 2:
                    catalogo = servidor.buscarLibro(in);                  
                    break;      
                case 3:   
                    catalogo = servidor.getLibros();                    
                    break;     
            }
               
        return catalogo;
    }
    /**
    * Metodo que se comunica con las bibliotecas remotas usando middleware
    */
    public static List<Libro> biblioRemota(int opcion, String cadena) throws RemoteException{
        String in = cadena;
        int option = opcion;
            switch(option){
                case 1:        
                    catalogo = middleware.getAuthor(in);                 
                    break;
                case 2:
                    catalogo = middleware.getTitle(in);                  
                    break;      
                case 3:   
                    catalogo = middleware.getLibros();                    
                    break;     
            }     
        return catalogo;
    }  
    /**
    * Metodo para la validacion de la dirección IP
    */
    public static void ipServer(){
        Scanner scanner = new Scanner(System.in);
        System.out.println("Ingrese la ip de la biblioteca");
        ip = scanner.next();      
        while(!ipValida(ip)){
            System.out.println("Ingrese una ip valida");
            ip = scanner.next();            
        }
  
    }
    /**
    * Metodo que se encarga de comprobar que la direccion ip es correcta
    */
    public static boolean ipValida(String ip) 
    { 
        String zeroTo255 
            = "(\\d{1,2}|(0|1)\\"
              + "d{2}|2[0-4]\\d|25[0-5])"; 
        String regex 
            = zeroTo255 + "\\."
              + zeroTo255 + "\\."
              + zeroTo255 + "\\."
              + zeroTo255; 
        Pattern p = Pattern.compile(regex); 
        if (ip == null) { 
            return false; 
        } 
        Matcher m = p.matcher(ip); 
        return m.matches(); 
    } 
    
    
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnBuscar1 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        lblLogo = new javax.swing.JLabel();
        txtBuscador = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        listLibros = new javax.swing.JList<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        textLibro = new javax.swing.JTextArea();
        btnBuscarAutor = new javax.swing.JButton();
        btnBuscarTitulo = new javax.swing.JButton();
        jComboBox1 = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        txtBuscador1 = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();

        btnBuscar1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/search.png"))); // NOI18N

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lblLogo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/logoB.png"))); // NOI18N
        lblLogo.setText("Biblioteca B");
        jPanel1.add(lblLogo, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 10, 140, 70));

        txtBuscador.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtBuscadorActionPerformed(evt);
            }
        });
        jPanel1.add(txtBuscador, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 50, 280, 30));

        jScrollPane1.setViewportView(listLibros);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 130, 180, 290));

        textLibro.setColumns(20);
        textLibro.setRows(5);
        jScrollPane2.setViewportView(textLibro);

        jPanel1.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 130, 420, 290));

        btnBuscarAutor.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/autor.png"))); // NOI18N
        btnBuscarAutor.setText("Buscar Autor");
        btnBuscarAutor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarAutorActionPerformed(evt);
            }
        });
        jPanel1.add(btnBuscarAutor, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 70, 180, 40));

        btnBuscarTitulo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/search.png"))); // NOI18N
        btnBuscarTitulo.setText("Buscar Titulo");
        btnBuscarTitulo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarTituloActionPerformed(evt);
            }
        });
        jPanel1.add(btnBuscarTitulo, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 20, 180, 40));

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "--", "BibliotecaB", "BibliotecaA", "BibliotecaC" }));
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });
        jPanel1.add(jComboBox1, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 90, 100, -1));

        jLabel1.setText("Buscar");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 50, 40, 30));

        txtBuscador1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtBuscador1ActionPerformed(evt);
            }
        });
        jPanel1.add(txtBuscador1, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 10, 280, 30));

        jLabel2.setText("Buscar en biblioteca: ");
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 90, 140, 20));

        jLabel3.setText("IP");
        jPanel1.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 10, 40, 30));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 728, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 477, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtBuscadorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtBuscadorActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtBuscadorActionPerformed

    private void txtBuscador1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtBuscador1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtBuscador1ActionPerformed

    private void btnBuscarTituloActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarTituloActionPerformed
        /**
         * En el siguiente codigo se encuentra la variable ip la cual almacena
         * la direccion escrita en el campo jtextfield de la interfaz
         * la cual ayudara a entablar la conexión
         * La variable cadena almacena el valor con el cual se solicitara 
         * la información, esta puede ser un autor, el titulo de un libro o
         * puede llegar vacia lo que indicará que se desean todos los libros
         * la variable libro almacena los libros provenientes de la consulta
         * para luego imprimirlo en el campo de texto correspondiente
         * 
         * En este caso las peticiones de autor y titulo se encuentran 
         * separadas debido a que se usan botones distintos para 
         * solicitar la información
         */
        
        ip = txtBuscador1.getText();
        String cadena = txtBuscador.getText();
        List<Libro> libro;
        
        if(jComboBox1.getSelectedItem() == "BibliotecaB"){
            try {
                /** Abriendo Conexión hacia la biblioteca local */
                servidor = (IServidorB) Naming.lookup("rmi://" + ip + ":" + port + "/" + path);
                if(cadena != null){
                    textLibro.setText(null);
                    libro =  biblioLocal(1,cadena);
                       for(int i = 0; i < libro.size(); i++){
                           textLibro.append(libro.get(i).getTitle() + '\n'); 
                       }
                }
                else if(cadena == null){
                    textLibro.setText(null);
                    libro =  biblioLocal(3,cadena);
                       for(int i = 0; i < libro.size(); i++){
                           textLibro.append(libro.get(i).getTitle() + '\n'); 
                       }
                }
                
            } catch (NotBoundException ex) {
                Logger.getLogger(BibliotecaB.class.getName()).log(Level.SEVERE, null, ex);
            } catch (MalformedURLException ex) {
                Logger.getLogger(BibliotecaB.class.getName()).log(Level.SEVERE, null, ex);
            } catch (RemoteException ex) {
                Logger.getLogger(BibliotecaB.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(BibliotecaB.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        else{
            try {
                /** Abriendo Conexión hacia las demas bibliotecas usando middleware */
                middleware = (IMiddlewareZ39) Naming.lookup("rmi://" + ip + ":" + portZ39 + "/" + pathZ39);
                if(cadena != ""){
                    textLibro.setText(null);
                    libro =  biblioRemota(1,cadena);
                       for(int i = 0; i < libro.size(); i++){
                           textLibro.append(libro.get(i).getTitle() + '\n'); 
                       }
                }
                else{
                    textLibro.setText(null);
                    libro =  biblioRemota(3,cadena);
                       for(int i = 0; i < libro.size(); i++){
                           textLibro.append(libro.get(i).getTitle() + '\n'); 
                       }
                }
                
            } catch (NotBoundException ex) {
                Logger.getLogger(BibliotecaB.class.getName()).log(Level.SEVERE, null, ex);
            } catch (MalformedURLException ex) {
                Logger.getLogger(BibliotecaB.class.getName()).log(Level.SEVERE, null, ex);
            } catch (RemoteException ex) {
                Logger.getLogger(BibliotecaB.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        
    }//GEN-LAST:event_btnBuscarTituloActionPerformed

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void btnBuscarAutorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarAutorActionPerformed
        ip = txtBuscador1.getText();
        String cadena = txtBuscador.getText();
        List<Libro> libro;
        
        if(jComboBox1.getSelectedItem() == "BibliotecaB"){
            try {
                /** Abriendo Conexión hacia la biblioteca local */
                servidor = (IServidorB) Naming.lookup("rmi://" + ip + ":" + port + "/" + path);
                if(cadena != null){
                    textLibro.setText(null);
                    libro =  biblioLocal(2,cadena);
                     textLibro.append(libro.get(0).getAuthor() + '\n');     
                }
                
                
            } catch (NotBoundException ex) {
                Logger.getLogger(BibliotecaB.class.getName()).log(Level.SEVERE, null, ex);
            } catch (MalformedURLException ex) {
                Logger.getLogger(BibliotecaB.class.getName()).log(Level.SEVERE, null, ex);
            } catch (RemoteException ex) {
                Logger.getLogger(BibliotecaB.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(BibliotecaB.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        else{
            try {
                /** Abriendo Conexión hacia las demas bibliotecas usando middleware */
                middleware = (IMiddlewareZ39) Naming.lookup("rmi://" + ip + ":" + portZ39 + "/" + pathZ39);
                if(cadena != ""){
                    textLibro.setText(null);
                    libro =  biblioRemota(2,cadena);
                    textLibro.append(libro.get(0).getAuthor() + '\n'); 
                       
                }
                
                
            } catch (NotBoundException ex) {
                Logger.getLogger(BibliotecaB.class.getName()).log(Level.SEVERE, null, ex);
            } catch (MalformedURLException ex) {
                Logger.getLogger(BibliotecaB.class.getName()).log(Level.SEVERE, null, ex);
            } catch (RemoteException ex) {
                Logger.getLogger(BibliotecaB.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_btnBuscarAutorActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(BibliotecaB.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(BibliotecaB.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(BibliotecaB.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BibliotecaB.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new BibliotecaB().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBuscar1;
    private javax.swing.JButton btnBuscarAutor;
    private javax.swing.JButton btnBuscarTitulo;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblLogo;
    private javax.swing.JList<String> listLibros;
    private javax.swing.JTextArea textLibro;
    private javax.swing.JTextField txtBuscador;
    private javax.swing.JTextField txtBuscador1;
    // End of variables declaration//GEN-END:variables
}
